# Lancer de Rayons en un Week-end

Peter Shirley, Trevor David Black, Steve Hollasch  
Version 4.0.2, 2025-04-25  
Copyright 2018-2024 Peter Shirley. Tous droits réservés.

---

## Table des matières

### 1 Aperçu

#### 2 Générer une image
2.1 Le format d'image PPM  
2.2 Créer un fichier image  
2.3 Ajouter un indicateur de progression  

#### 3 La classe vec3
3.1 Fonctions utilitaires pour les couleurs  

#### 4 Rayons, une caméra simple et l'arrière-plan
4.1 La classe ray  
4.2 Envoyer des rayons dans la scène  

#### 5 Ajouter une sphère
5.1 Intersection rayon-sphère  
5.2 Créer notre première image par lancer de rayons  

#### 6 Normales de surface et objets multiples
6.1 Ombrage avec les normales de surface  
6.2 Simplifier le code d'intersection rayon-sphère  
6.3 Une abstraction pour les objets intersectables  
6.4 Faces avant vs faces arrière  
6.5 Une liste d'objets intersectables  
6.6 Nouvelles fonctionnalités C++  
6.7 Constantes communes et fonctions utilitaires  
6.8 Une classe Intervalle  

#### 7 Déplacer le code de la caméra dans sa propre classe

#### 8 Anticrénelage
8.1 Utilitaires de nombres aléatoires  

---

### 8.2 Générer des pixels avec plusieurs échantillons

9 Matériaux diffus  
9.1 Un matériau diffus simple  
9.2 Limiter le nombre de rayons enfants  
9.3 Corriger l'acné d'ombre  
9.4 Réflexion Lambertienne vraie  
9.5 Utiliser la correction gamma pour une intensité précise  

10 Métal  
10.1 Une classe abstraite pour les matériaux  
10.2 Une structure de données pour décrire les intersections  
10.3 Modéliser la diffusion et la réflectance lumineuse  
10.4 Réflexion miroir  
10.5 Une scène avec des sphères métalliques  
10.6 Réflexion floue  

11 Diélectriques  
11.1 Réfraction  
11.2 Loi de Snell  
11.3 Réflexion interne totale  
11.4 Approximation de Schlick  
11.5 Modéliser une sphère de verre creuse  

12 Caméra positionnable  
12.1 Géométrie de vue de la caméra  
12.2 Positionner et orienter la caméra  

13 Flou de défocalisation  
13.1 Approximation d'une lentille mince  
13.2 Générer des rayons échantillons  

14 Et ensuite ?  
14.1 Un rendu final  
14.2 Prochaines étapes  
14.2.1 Livre 2 : Lancer de Rayons : La Semaine Suivante  
14.2.2 Livre 3 : Lancer de Rayons : Le Reste de Votre Vie  
14.2.3 Autres directions  

15 Remerciements  

16 Citer ce livre  
16.1 Données de base  
16.2 Extraits  
16.2.1 Markdown  
16.2.2 HTML  
16.2.3 LaTeX et BibTeX  

---

### 16.2.4 BibLaTeX  
16.2.5 IEEE  
16.2.6 MLA  

---

# 1. Aperçu

J'ai enseigné de nombreux cours en infographie au fil des années. J'utilise souvent le lancer de rayons, car cela oblige à écrire tout le code tout en permettant d'obtenir des images impressionnantes sans API. J'ai décidé d'adapter mes notes de cours en un guide pratique pour vous amener rapidement à un programme fonctionnel. Ce ne sera pas un moteur de lancer de rayons complet, mais il inclura l'éclairage indirect qui a fait du lancer de rayons un pilier des films. Suivez ces étapes, et l'architecture de votre moteur sera adaptée à des extensions si vous souhaitez aller plus loin.

Quand on parle de "lancer de rayons", cela peut signifier beaucoup de choses. Ce que je décris est techniquement un *path tracer*, assez général. Bien que le code soit simple (laissez l'ordinateur faire le travail !), les résultats seront satisfaisants.

Je vous guiderai étape par étape, avec des conseils de débogage. À la fin, vous aurez un moteur produisant de belles images. Cela devrait prendre un week-end. Si c'est plus long, pas de panique ! J'utilise le C++, mais vous pouvez choisir un autre langage. Cependant, le C++ est rapide, portable, et utilisé dans les moteurs de rendu professionnels.

Je ne fournis pas le code en ligne, mais tout est présenté ici (sauf quelques opérateurs simples de la classe `vec3`). Je crois qu'écrire le code soi-même est la meilleure façon d'apprendre. Cependant, le code final est disponible sur GitHub.

---

# 2. Générer une image

## 2.1 Le format d'image PPM

Pour visualiser des images, le format PPM (Portable PixMap) est simple. Exemple de fichier PPM :

```
P3
3 2
255
255 0 0   0 255 0    0 0 255
255 255 0  255 255 255 0 0 0
```

Ce code C++ génère un dégradé rouge-vert :

```cpp
#include <iostream>
int main() {
    int largeur = 256;
    int hauteur = 256;
    std::cout << "P3\n" << largeur << ' ' << hauteur << "\n255\n";
    for (int j = 0; j < hauteur; ++j) {
        for (int i = 0; i < largeur; ++i) {
            double r = double(i) / (largeur-1);
            double g = double(j) / (hauteur-1);
            int ir = int(255.999 * r);
            int ig = int(255.999 * g);
            std::cout << ir << ' ' << ig << ' ' << 0 << '\n';
        }
    }
}
```

---

## 2.2 Créer un fichier image

Redirigez la sortie vers un fichier `.ppm` :

```bash
./programme > image.ppm
```

Ouvrez-le avec un visualiseur compatible (ex: GIMP).

---

## 2.3 Ajouter un indicateur de progression

Ajoutez un suivi de l'avancement avec `std::clog` :

```cpp
for (int j = 0; j < hauteur; ++j) {
    std::clog << "\rLignes restantes : " << (hauteur - j) << ' ' << std::flush;
    // ... code de rendu ...
}
std::clog << "\rTerminé.     \n";
```

---

# 3. La classe vec3

Une classe pour les vecteurs 3D et les couleurs :

```cpp
class vec3 {
public:
    double e[3];
    vec3() : e{0,0,0} {}
    vec3(double e0, double e1, double e2) : e{e0, e1, e2} {}
    double x() const { return e[0]; }
    double y() const { return e[1]; }
    double z() const { return e[2]; }
    // Surcharge d'opérateurs, produit scalaire, etc.
};
using point3 = vec3; // Clarification sémantique
```

---

## 3.1 Fonctions utilitaires pour les couleurs

Une fonction pour écrire les couleurs au format PPM :

```cpp
void write_color(std::ostream& out, const color& pixel_color) {
    int r = static_cast<int>(255.999 * pixel_color.x());
    int g = static_cast<int>(255.999 * pixel_color.y());
    int b = static_cast<int>(255.999 * pixel_color.z());
    out << r << ' ' << g << ' ' << b << '\n';
}
```

---

# 4. Rayons, caméra et arrière-plan

## 4.1 La classe ray

Un rayon est défini par son origine et sa direction :

```cpp
class ray {
public:
    ray(const point3& origine, const vec3& direction)
        : orig(origine), dir(direction) {}
    point3 origine() const { return orig; }
    vec3 direction() const { return dir; }
    point3 at(double t) const { return orig + t * dir; }
private:
    point3 orig;
    vec3 dir;
};
```

---

## 4.2 Envoyer des rayons dans la scène

Générez un dégradé bleu-blanc basé sur la direction du rayon :

```cpp
color ray_color(const ray& r) {
    vec3 direction_unitaire = vecteur_unitaire(r.direction());
    double a = 0.5 * (direction_unitaire.y() + 1.0);
    return (1.0 - a) * color(1.0, 1.0, 1.0) + a * color(0.5, 0.7, 1.0);
}
```

---

# 5. Ajouter une sphère

## 5.1 Intersection rayon-sphère

Équation d'une sphère :  
$$(x - C_x)^2 + (y - C_y)^2 + (z - C_z)^2 = r^2$$

Solution pour \( t \) via l'équation quadratique :

```cpp
bool hit_sphere(const point3& centre, double rayon, const ray& r) {
    vec3 oc = r.origine() - centre;
    double a = produit_scalaire(r.direction(), r.direction());
    double b = 2.0 * produit_scalaire(oc, r.direction());
    double c = produit_scalaire(oc, oc) - rayon * rayon;
    double discriminant = b * b - 4 * a * c;
    return discriminant >= 0;
}
```

---

## 5.2 Créer notre première image

Coloriez en rouge les pixels intersectant une sphère :

```cpp
color ray_color(const ray& r) {
    if (hit_sphere(point3(0,0,-1), 0.5, r))
        return color(1, 0, 0);
    // ... dégradé ...
}
```

---

# 6. Normales de surface et objets multiples

## 6.1 Ombrage avec les normales

Calculez la normale de la sphère pour l'ombrage :

```cpp
double hit_sphere(...) {
    // ... calcul de t ...
    vec3 normale = (r.at(t) - centre) / rayon;
    return 0.5 * color(normale.x() + 1, normale.y() + 1, normale.z() + 1);
}
```

---

## 6.3 Abstraction pour les objets intersectables

Classe de base `hittable` :

```cpp
class hittable {
public:
    virtual ~hittable() = default;
    virtual bool hit(const ray& r, interval ray_t, hit_record& rec) const = 0;
};
```

---

## 6.5 Liste d'objets intersectables

Classe `hittable_list` pour gérer plusieurs objets :

```cpp
class hittable_list : public hittable {
public:
    std::vector<shared_ptr<hittable>> objets;
    // ... méthodes pour ajouter des objets ...
    bool hit(const ray& r, interval ray_t, hit_record& rec) const override {
        // ... vérifier tous les objets ...
    }
};
```

---

# 7. Caméra dans sa propre classe

Déplacez la logique de la caméra dans une classe dédiée :

```cpp
class camera {
public:
    void render(const hittable& monde) {
        // ... initialisation et boucle de rendu ...
    }
private:
    // ... paramètres de la caméra ...
};
```

---

# 8. Anticrénelage

Générez plusieurs échantillons par pixel et moyennez-les :

```cpp
for (int echantillon = 0; echantillon < echantillons_par_pixel; ++echantillon) {
    ray r = obtenir_rayon(i, j);
    couleur_pixel += couleur_rayon(r, monde);
}
couleur_pixel *= echelle_echantillons;
```

---

# 9. Matériaux diffus

## 9.1 Matériau diffus simple

Générez des rayons diffus aléatoires :

```cpp
class lambertian : public material {
public:
    bool scatter(const ray& r_in, const hit_record& rec, color& attenuation, ray& scattered) const override {
        vec3 direction_diffuse = rec.normale + vecteur_unitaire_aleatoire();
        scattered = ray(rec.p, direction_diffuse);
        attenuation = albedo;
        return true;
    }
};
```

---

# 10. Métal

## 10.4 Réflexion miroir

Utilisez la loi de réflexion :

```cpp
vec3 reflect(const vec3& v, const vec3& n) {
    return v - 2 * produit_scalaire(v, n) * n;
}
```

---

# 11. Diélectriques

## 11.1 Réfraction

Implémentez la loi de Snell et l'approximation de Schlick :

```cpp
vec3 refract(const vec3& uv, const vec3& n, double eta_i_sur_eta_t) {
    double cos_theta = fmin(produit_scalaire(-uv, n), 1.0);
    double sin_theta = sqrt(1.0 - cos_theta * cos_theta);
    if (eta_i_sur_eta_t * sin_theta > 1.0) {
        // Réflexion totale
        return reflect(uv, n);
    }
    // ... calcul de la direction réfractée ...
}
```

---

# 12. Caméra positionnable

Contrôlez la position, l'orientation et le champ de vision :

```cpp
cam.lookfrom = point3(13, 2, 3);
cam.lookat = point3(0, 0, 0);
cam.vfov = 20;
```

---

# 13. Flou de défocalisation

Simulez une ouverture de caméra :

```cpp
class camera {
public:
    double angle_defocus = 0.6;
    double distance_focus = 10.0;
    // ... générer des rayons depuis un disque de défocalisation ...
};
```

---

# 14. Et ensuite ?

Explorez les suites du livre pour ajouter des textures, des lumières, des volumes, et optimiser les performances. Amusez-vous à créer des scènes complexes !

---

*Ce document est une traduction adaptée du contenu original en anglais. Les termes techniques peuvent varier selon les conventions francophones.*