name: Auto Merge on Main

on:
  # schedule:
  #   - cron: '0 12 * * *'
  #   - cron: '0 23 * * *'
  workflow_dispatch:

jobs:
  checkout:
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v3

  merge-auto:
    runs-on: ubuntu-latest
    needs: [checkout]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Set up Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      - name: Mark repository as safe
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Merge feature branches into main
        run: |
          for branch in branch_server branch_gui branch_ai; do
            echo "Fetching $branch..."
            git fetch origin $branch
            echo "Attempting to merge from $branch..."
      
            if git merge origin/$branch --allow-unrelated-histories -X theirs --no-edit; then
              echo "Merge automatic succeeded for $branch."
            else
              echo "Automatic merge failed for $branch."

              conflicted_files=$(git diff --name-only --diff-filter=U)
              if [ -n "$conflicted_files" ]; then
                echo "Conflicting Files: $conflicted_files"
                for file in $conflicted_files; do
                  if [ "$file" == "README.md" ]; then
                    echo "Preserving README.md from main..."
                    git checkout main -- README.md
                    if ! git diff --quiet "$file"; then
                      git add "$file"
                    fi
                  else
                    git checkout --theirs "$file"
                    git add "$file"
                  fi
                done
                if ! git diff --cached --quiet; then
                  git commit -m "Automatic conflict resolution with $branch"
                else
                  echo "No changes detected after conflict resolution."
                fi
              else
                echo "No conflicts detected, fallback: checkout team folder only."
                if [ "$branch" = "branch_ai" ]; then
                  team_folder="Ai"
                elif [ "$branch" = "branch_gui" ]; then
                  team_folder="Gui"
                elif [ "$branch" = "branch_server" ]; then
                  team_folder="Server"
                else
                  echo "No folder mapping defined for branch: $branch"
                  continue
                fi
                git checkout origin/$branch -- "$team_folder"
                if ! git diff --cached --quiet; then
                  git commit -m "Manual checkout of $team_folder from $branch due to merge failure"
                else
                  echo "No changes detected for $team_folder after fallback."
                fi
              fi
            fi
          done

      - name: Push merged changes to main
        run: |
          git push origin main

